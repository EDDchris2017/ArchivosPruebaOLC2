carr = 0

println = (val = "")=>{
    print("\n");
    print(carr+"\t")
    carr = carr + 1
    print(val);
}

test = (m)=>{
    return (8+m)
}

vectorchange = (vector)=>{
    vector = vector + 8
    vector = c(9,8,10,vector)
    println("INSIDE FUNCTION:\t");
    print(vector);
}

main = (k = 55) => {
    divider = "++++++++++++++++++++++++++++++++++++";
    divider2 = "---------------------------------------------------------------------------------";
    println(divider);
    println(divider);
    print("\n\t\tMEAN / MODE / MEDIAN");
    println(divider);
    println(divider);
    iVector = c(1,2,3,4,5,6,7,8,9,10,11,12,30,30,30,30)
    dVector = c(1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0,12.0,12.0,12.0)
    println("Mean para entero y double\n");
    println(divider2);
    println("Mean iVector sin trim:\t"+mean(iVector));
    println("Mean dVector sin trim:\t"+mean(dVector));
    println("Mean iVector con trim:\t"+mean(iVector, 8.0));
    println("Mean dVector con trim:\t"+mean(dVector, 8.0));
    println(divider);
    println("Median para entero, double, string, boolean");
    println(divider2);
    sVector = c("a","b","c","d","e","f","g","e","e");
    bVector = c(true,true,true,false,true,true,true,false);
    println("Median iVector sin trim:\t"+median(iVector));
    println("Median dVector sin trim:\t"+median(dVector));
    println("Median sVector sin trim:\t"+median(sVector));
    println("Median bVector sin trim:\t"+median(bVector));
    println(divider2);
    println("Median iVector con trim:\t"+median(iVector,9));
    println("Median dVector con trim:\t"+median(dVector,9));
    println("Median sVector con trim:\t"+median(sVector,"e"));
    println("Median bVector con trim:\t"+median(bVector,true));
    println(divider)    
    println("Mode para entero, double, string, boolean");
    println(divider2)    
    println("Mode iVector sin trim:\t"+mode(iVector));
    println("Mode dVector sin trim:\t"+mode(dVector));
    println("Mode sVector sin trim:\t"+mode(sVector));
    println("Mode bVector sin trim:\t"+mode(bVector));
    println(divider2)    
    println("Mode iVector con trim:\t"+mode(iVector,9));
    println("Mode dVector con trim:\t"+mode(dVector,9));
    println("Mode sVector con trim:\t"+mode(sVector,"e"));
    println("Median bVector con trim:\t"+mode(bVector,true));
    println(divider);
    println(divider);
    nummatrix0 = matrix(true, 3,9);
    nummatrix1 = matrix(c(1,2,3,4,5,6,7,8,9),3,9)
    nummatrix2 = matrix(c(11,12,13,14,15,16,17,18,19),3,9)
    nummatrix3 = matrix(c(0.1),3,9)
    nummatrix4 = matrix("taco",3,9)
    println("Todas las matrices\n")
    print(nummatrix0)
    print(nummatrix1)
    print(nummatrix2)
    print(nummatrix3)
    print(nummatrix4)
    print("\nPrueba de aritmeticas matrices\n");
    print("############ SUMA ############");
    println("Boolean + Entero\n")
    print(nummatrix1 + nummatrix0);
    println("nummatrix1 no debio cambiar\n");
    print(nummatrix1);
    println("Numeros\nEntero + Entero\n");
    print(nummatrix1 + nummatrix2)
    println("nummatrix1 no debio cambiar\n");
    print(nummatrix1);
    println("Entero + Double\n");
    print(nummatrix2 + nummatrix3)
    print("\nnummatrix2 no debio cambiar\n");
    print(nummatrix2);
    print("\nnummatrix2 no debio cambiar de tipo:\t"+typeof(nummatrix2[1]));
    print("\nString + Entero\n");
    print(nummatrix1 + nummatrix4);
    print("\nnummatrix1 no debio cambiar\n");
    print(nummatrix1)
    print("\nnummatrix1 no debio cambiar de tipo:\t" + typeof(nummatrix1[1]));
    print("\nString + Double\n");
    print(nummatrix2 + nummatrix4)
    print("\nnummatrix2 no debio cambiar\n");
    print(nummatrix2)
    print("\nnummatrix2 no debio cambiar de tipo:\t" + typeof(nummatrix2[1]));
    print("\n\n\n$$$$$$$$$$$$$$$$ RESTA $$$$$$$$$$$$$$$$$$$\n\n")
    print("\n Double - Double\n")
    print(nummatrix3 - nummatrix3)
    print("\nnummatrix3 no debio cambiar\n");
    print(nummatrix3)
    print("\n\n\n================ NATIVAS ================\n\n")
    print("\ntrunk: " + trunk(5.5));
    print("\nround: " + round(5.49899));
    print("\nstringlength: " + stringlength("Hesoyam123*"));
    print("\nremove: " + remove("Hesoyam123*","Heso"));
    print("\ntoupper: " + touppercase("Hesoyam123*"));
    print("\ntolower: " + tolowercase(touppercase("Hesoyam123*")));
    valor = matrix(c(5,8,9,30),3,9)
    print("\nValor de columnas matriz: "+ncol(valor)+"\n")
    print("Valor de filas matriz: "+nrow(valor)+"\n")
    print(valor)
    print("\nfilas:\n")
    print(valor[3,])
    print("\ncolumnas:\n")
    print(valor[,3])
    print("\nvalor individual:" + valor[2,8] + "\n")
    print("\nvalor acceso tipo 4: " + valor[10] + "\n")
    print("\nvalor acceso tipo 4: " + valor[27] + "\n")
    print("\nvalor acceso tipo 4: " + valor[28] + "\n")
    print("################## BOOLEAN ################\n")
    boolmatrix = matrix(true,3,4)
    print(boolmatrix)
    print("\n################ INTEGER ###################\n")
    boolmatrix[3,] = 3
    print(boolmatrix)
    print("\n################ BOOLEAN ###################\n")
    boolmatrix[,3] = 88.0
    print(boolmatrix) 
    print("\n############# STRING ######################\n")
    boolmatrix[1,2] = "hola"
    boolmatrix[10] = "prueba"
    print(boolmatrix) 
    print("\n---------------------------- fin de asignacion 1 ----------------------------")
    boolmatrix[1,] = c(5,9,8)
    print("\nvalor por defecto " + k + "\n");
    rr = list(5,8,true,"lul", c(9,8,7,0.0))
    print(rr)
    rr[40] = "hi"
    rr[2] = list(8,9,9);
    rr[[4]] = c(9,15,16)
    print("\n");
    print(rr)
    print("\n");
    zz = c(c(4,8),c(9), c(40,30))
    print(zz[4][1][1][1][1][1]+ 9 +"z")
    print(zz[2][2][1][1][1][1])
    . = 65
    print("\n"+.)
    a = 5
    b = c("hola", "mundo")
    b[9] = "queso"
    print(a[1][1][1][1][1]+"\n")
    print(b[9][1][1][1][1]);
    d = c(5,9,8,7)
    d = d + d 
    d = d + 5.0
    print("\n");
    print(d)
    d = d + d
    print("\n")
    print(d)
    d = d - 30
    print("\n")
    print(d)
    d = d * d
    print("\n")
    print(d)
    println("--------------------- RESULTADO DEL SWITCH --------------------- ")	
    switch(rr[[1]]){
	case 1:
		print("si a caso 1");
		break;
	default:
		print("\ndefecto");
	case 2:
		print("\nsi a caso 2");
		break;
	case 3:
		print("si a caso 3");
		break;
	case 4:
		print("si a caso 4");
		break;
    }
   


    println(divider)
    println(divider)
    println(divider)
    println(divider)
    println(divider)

    t = c(1,2,6)
    println("ANTES DEL CAMBIO!")
    println(t);
    vectorchange(t);
    vectorchange(t);
    vectorchange(t);
    vectorchange(t);
    vectorchange(t);
    vectorchange(t);
    println(divider2);	
    println("DESPUES DEL CAMBIO!")
    println(t)

    relacionales()

}


relacionales = ()=>{
    println("#################################")
    println("#################################")
    println("Probando relacionales de vectores");
    cc = c(5,9,7,8,9,1,2,5,30)
    cc2 = c(5,9,7,8,9,1,2,5,30)
    cc2 = cc2 + 0.0;
    println(cc)
    println("El vector debe cambiar a booleano");
    println("Comparar <")
    println("int - int")
    println(cc < 25)
    println(typeof(cc))
    println(cc[1])
    println("double - int")
    println(cc2 < 25)
    graficas();
}


graficas = ()=>{
    println("#################################");
    println("#################################");
    println("generando graficas");  
    println("#################################");
    println("#################################");
    pie(c(20,20,20,20,20),c("carro 1", "carro 2", "carro 3", "carro 4", "carro 5"),"carros");
    println("graficando pie...");  
    barplot(c(50,70,10,5,900),"marcas","ventas","Venta de carros 2020",c("carro 1", "carro 2", "carro 3", "carro 4", "carro 5"));
    println("graficando barplot...");  
    plot(c(10,20,50,5,100,2,3), "o","Alumnos", "Nota acumulada", "Series de datos");
    println("graficando plot con todo...");  
    plot(c(10,20,50,5,100,2,3), "p","Alumnos", "Nota acumulada", "Series de datos");
    println("graficando plot sin lineas...");  
    plot(c(10,20,50,5,100,2,3), "i","Alumnos", "Nota acumulada", "Series de datos");
    println("graficando plot sin puntos...");  
    hist(c(10,20,50,5,100,2,3), "Alumnos", "Series de datos");
    println("graficando plot sin puntos...");  
}

main(88)

#*


0	++++++++++++++++++++++++++++++++++++
1	++++++++++++++++++++++++++++++++++++
		MEAN / MODE / MEDIAN
2	++++++++++++++++++++++++++++++++++++
3	++++++++++++++++++++++++++++++++++++
4	Mean para entero y double

5	---------------------------------------------------------------------------------
6	Mean iVector sin trim:	12
7	Mean dVector sin trim:	7.6
8	Mean iVector con trim:	10
9	Mean dVector con trim:	5.2
10	++++++++++++++++++++++++++++++++++++
11	Median para entero, double, string, boolean
12	---------------------------------------------------------------------------------
13	Median iVector sin trim:	8
14	Median dVector sin trim:	8.0
15	Median sVector sin trim:	e
16	Median bVector sin trim:	false
17	---------------------------------------------------------------------------------
18	Median iVector con trim:	30
19	Median dVector con trim:	12.0
20	Median sVector con trim:	f
21	Median bVector con trim:	false
22	++++++++++++++++++++++++++++++++++++
23	Mode para entero, double, string, boolean
24	---------------------------------------------------------------------------------
25	Mode iVector sin trim:	30
26	Mode dVector sin trim:	12.0
27	Mode sVector sin trim:	e
28	Mode bVector sin trim:	true
29	---------------------------------------------------------------------------------
30	Mode iVector con trim:	30
31	Mode dVector con trim:	12.0
32	Mode sVector con trim:	f
33	Median bVector con trim:	false
34	++++++++++++++++++++++++++++++++++++
35	++++++++++++++++++++++++++++++++++++
36	Todas las matrices

     [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    
[1]  1      4      7      1      4      7      1      4      7     
[2]  2      5      8      2      5      8      2      5      8     
[3]  3      6      9      3      6      9      3      6      9     

     [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    
[1]  11      14      17      11      14      17      11      14      17     
[2]  12      15      18      12      15      18      12      15      18     
[3]  13      16      19      13      16      19      13      16      19     

     [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    
[1]  0.1      0.1      0.1      0.1      0.1      0.1      0.1      0.1      0.1     
[2]  0.1      0.1      0.1      0.1      0.1      0.1      0.1      0.1      0.1     
[3]  0.1      0.1      0.1      0.1      0.1      0.1      0.1      0.1      0.1     
    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    
[1]  taco      taco      taco      taco      taco      taco      taco      taco      taco     
[2]  taco      taco      taco      taco      taco      taco      taco      taco      taco     
[3]  taco      taco      taco      taco      taco      taco      taco      taco      taco     

\nPrueba de aritmeticas matrices\n 
############ SUMA ############ 
\n 
29\t 
Boolean + Entero\n 
\n 
30\t 
nummatrix1 no debio cambiar\n 
     [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    
[1]  1      4      7      1      4      7      1      4      7     
[2]  2      5      8      2      5      8      2      5      8     
[3]  3      6      9      3      6      9      3      6      9     

\n 
31\t 
Numeros\nEntero + Entero\n 
     [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    
[1]  12      18      24      12      18      24      12      18      24     
[2]  14      20      26      14      20      26      14      20      26     
[3]  16      22      28      16      22      28      16      22      28     

\n 
32\t 
nummatrix1 no debio cambiar\n 
     [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    
[1]  1      4      7      1      4      7      1      4      7     
[2]  2      5      8      2      5      8      2      5      8     
[3]  3      6      9      3      6      9      3      6      9     

\n 
33\t 
Entero + Double\n 
     [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    
[1]  11.1      14.1      17.1      11.1      14.1      17.1      11.1      14.1      17.1     
[2]  12.1      15.1      18.1      12.1      15.1      18.1      12.1      15.1      18.1     
[3]  13.1      16.1      19.1      13.1      16.1      19.1      13.1      16.1      19.1     

\nnummatrix2 no debio cambiar\n 
     [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    
[1]  11      14      17      11      14      17      11      14      17     
[2]  12      15      18      12      15      18      12      15      18     
[3]  13      16      19      13      16      19      13      16      19     

\nnummatrix2 no debio cambiar de tipo:\tinteger 
\nString + Entero\n 
     [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    
[1]  1taco      4taco      7taco      1taco      4taco      7taco      1taco      4taco      7taco     
[2]  2taco      5taco      8taco      2taco      5taco      8taco      2taco      5taco      8taco     
[3]  3taco      6taco      9taco      3taco      6taco      9taco      3taco      6taco      9taco     

\nnummatrix1 no debio cambiar\n 
     [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    
[1]  1      4      7      1      4      7      1      4      7     
[2]  2      5      8      2      5      8      2      5      8     
[3]  3      6      9      3      6      9      3      6      9     

\nnummatrix1 no debio cambiar de tipo:\tinteger 
\nString + Double\n 
     [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    
[1]  11taco      14taco      17taco      11taco      14taco      17taco      11taco      14taco      17taco     
[2]  12taco      15taco      18taco      12taco      15taco      18taco      12taco      15taco      18taco     
[3]  13taco      16taco      19taco      13taco      16taco      19taco      13taco      16taco      19taco     

\nnummatrix2 no debio cambiar\n 
     [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    
[1]  11      14      17      11      14      17      11      14      17     
[2]  12      15      18      12      15      18      12      15      18     
[3]  13      16      19      13      16      19      13      16      19     

\nnummatrix2 no debio cambiar de tipo:\tinteger 
\n\n\n$$$$$$$$$$$$$$$$ RESTA $$$$$$$$$$$$$$$$$$$\n\n 
\n Double - Double\n 
     [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    
[1]  0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0     
[2]  0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0     
[3]  0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0     

\nnummatrix3 no debio cambiar\n 
     [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    
[1]  0.1      0.1      0.1      0.1      0.1      0.1      0.1      0.1      0.1     
[2]  0.1      0.1      0.1      0.1      0.1      0.1      0.1      0.1      0.1     
[3]  0.1      0.1      0.1      0.1      0.1      0.1      0.1      0.1      0.1     

================ NATIVAS ================

\n\n\n================ NATIVAS ================\n\n 
\ntrunk: 5 
\nround: 5 
\nstringlength: 11 
\nremove: yam123* 
\ntoupper: HESOYAM123* 
\ntolower: hesoyam123* 
\nValor de columnas matriz: 9\n 
Valor de filas matriz: 3\n 
     [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    
[1]  5      30      9      8      5      30      9      8      5     
[2]  8      5      30      9      8      5      30      9      8     
[3]  9      8      5      30      9      8      5      30      9     

\nfilas:\n 
9 8 5 30 9 8 5 30 9 
\ncolumnas:\n 
9 30 5 
\nvalor individual:9\n 
\nvalor acceso tipo 4: 8\n 
\nvalor acceso tipo 4: 9\n 
################## BOOLEAN ################\n 
     [1]    [2]    [3]    [4]    
[1]  true      true      true      true     
[2]  true      true      true      true     
[3]  true      true      true      true     

\n################ INTEGER ###################\n 
     [1]    [2]    [3]    [4]    
[1]  true      true      true      true     
[2]  true      true      true      true     
[3]  true      true      true      true     

\n################ BOOLEAN ###################\n 
     [1]    [2]    [3]    [4]    
[1]  true      true      true      true     
[2]  true      true      true      true     
[3]  true      true      true      true     

\n############# STRING ######################\n 
     [1]    [2]    [3]    [4]    
[1]  true      hola      true      prueba     
[2]  true      true      true      true     
[3]  true      true      true      true     

\n---------------------------- fin de asignacion 1 ---------------------------- 
\nvalor por defecto 88\n 
[ 5  , 8  , true  , lul  , 9.0 8.0 7.0 0.0  ]
\n 
[ 5  , 8  , true  , 9 15 16  , 9.0 8.0 7.0 0.0  , NULL  , NULL  , NULL  , NULL  , NULL  , NULL  , NULL  , NULL  , NULL  , NULL  , NULL  , NULL  , NULL  , NULL  , NULL  , NULL  , NULL  , NULL  , NULL  , NULL  , NULL  , NULL  , NULL  , NULL  , NULL  , NULL  , NULL  , NULL  , NULL  , NULL  , NULL  , NULL  , NULL  , NULL  , hi  ]
\n 
49z 
\n65 
5\n 
queso 
\n 
15.0 23.0 21.0 19.0 
\n 
30.0 46.0 42.0 38.0 
\n 
0.0 16.0 12.0 8.0 
\n 
0.0 256.0 144.0 64.0 
\n 
34\t 
--------------------- RESULTADO DEL SWITCH ---------------------  
\ndefecto 
\n 
35\t 
++++++++++++++++++++++++++++++++++++ 
\n 
36\t 
++++++++++++++++++++++++++++++++++++ 
\n 
37\t 
++++++++++++++++++++++++++++++++++++ 
\n 
38\t 
++++++++++++++++++++++++++++++++++++ 
\n 
39\t 
++++++++++++++++++++++++++++++++++++ 
\n 
40\t 
ANTES DEL CAMBIO! 
\n 
41\t 
1 2 6 
\n 
42\t 
INSIDE FUNCTION:\t 
9 8 10 9 10 14 
\n 
43\t 
INSIDE FUNCTION:\t 
9 8 10 9 10 14 
\n 
44\t 
INSIDE FUNCTION:\t 
9 8 10 9 10 14 
\n 
45\t 
INSIDE FUNCTION:\t 
9 8 10 9 10 14 
\n 
46\t 
INSIDE FUNCTION:\t 
9 8 10 9 10 14 
\n 
47\t 
INSIDE FUNCTION:\t 
9 8 10 9 10 14 
\n 
48\t 
--------------------------------------------------------------------------------- 
\n 
49\t 
DESPUES DEL CAMBIO! 
\n 
50\t 
1 2 6 
\n 
51\t 
################################# 
\n 
52\t 
################################# 
\n 
53\t 
Probando relacionales de vectores 
\n 
54\t 
5 9 7 8 9 1 2 5 30 
\n 
55\t 
El vector debe cambiar a booleano 
\n 
56\t 
Comparar < 
\n 
57\t 
int - int 
\n 
58\t 
true true true true true true true true false 
\n 
59\t 
integer 
\n 
60\t 
5 
\n 
61\t 
double - int 
\n 
62\t 
true true true true true true true true false 
\n 
63\t 
################################# 
\n 
64\t 
################################# 
\n 
65\t 
generando graficas 
\n 
66\t 
################################# 
\n 
67\t 
################################# 
\n 
68\t 
graficando pie... 
\n 
69\t 
graficando barplot... 
\n 
70\t 
graficando plot con todo... 
\n 
71\t 
graficando plot sin lineas... 
\n 
72\t 
graficando plot sin puntos... 
\n 
73\t 
graficando plot sin puntos... 


*#

#*
ERRORES 
TIPO        MSN                                                         LINEA   COLUMNA
SEMANTICO INDEX OUT OF BOUNDS FOR MATRIX, MAX SIZE 27                   124        39
SEMANTICO MATRIX COLUMNS AND VECTOR SIZE ARE NOT THE SAME               139         5
SEMANTICO UNABLE TO USE TYPE 1 ACCESS ASSIGN WITH LIST AND 3 PARAMS     144         5
SEMANTICO INDEX OUT OF BOUNDS 2                                         151         17

*#
