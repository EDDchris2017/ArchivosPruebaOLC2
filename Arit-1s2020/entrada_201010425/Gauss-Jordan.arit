System.out.println = (c = "")=>{
    print("\n");
    print(c);
}

System.out.print = (c = "") =>{
    print(c);
}

## Function to print the matrix
PrintMatrix = (a,n)=>
{
    System.out.println(default);
    i = 1;
    while (i <= n)
    {
        j = 1;
        while(j <= n + 1){
            System.out.print(a[i,j] + " ");
            j = j + 1;
        }
        System.out.println(default);
        i = i + 1;
    }
}

## funciÃ³n para reducir la matriz
PerformOperation = (a, n)=>
{
    j = null;
    k = 0;
    c = null;
    flag = 0;
    m = 0;

    i = 1;
    ## Performing elementary operations
    while(i <= n)
    {
        if (a[i,i] == 0)
        {
            c = 1;
            while (a[i + c,i] == 0 & (i + c) < n)
                c = c + 1;

            if ((i + c) == n)
            {
                flag = 1;
                break;
            }

            k = 1;
            j = i;

            while (k <= n + 1)
            {
                temp = a[j,k];
                a[j,k] = a[j+c,k];
                a[j+c,k] = temp;
                k = k + 1;
		        zzzz = 3;
            }
	    
        }
	print(temp)
	print(zzzz)

        j = 1;
        while(j <= n)
        {
            ## Excluding all i == j
            if (i != j)
            {

                ## Converting Matrix to reduced row
                ## echelon form(diagonal matrix)
                p = a[j,i] / a[i,i];

                k = 1
                while(k <= n + 1){
                    a[j,k] = a[j,k] - (a[i,k]) * p;
                    k = k + 1;
                }
            }
            j = j + 1;

        }

        i = i + 1;
    }

    return (flag);
}

#*
    // Function to print the desired result
    // if unique solutions exists, otherwise
    // prints no solution or infinite solutions
    // depending upon the input given.
*#

PrintResult = function(a, n, flag)
{
    System.out.print("Result is : ");

    if (flag == 2){
        System.out.println("Infinite Solutions Exists");
    }
    else if (flag == 3){
        System.out.println("No Solution Exists");
    }

    #*
        // Printing the solution by dividing constants by
        // their respective diagonal elements
    *#
    else {
        i = 1;
        while (i <= n){
            System.out.print(a[i,n+1] / a[i,i] +" ");
            i = i +1
        }
    }
}

## To check whether infinite solutions
## exists or no solution exists
CheckConsistency = function(a, n, flag)
{
    i = 1;
    j = 1;
    sum = null;

    ## flag == 2 for infinite solution
    ## flag == 3 for No solution
    flag = 3;
    while (i <= n)
    {
        sum = 0;
        j = 1;
        while ( j <= n ){
            sum = sum + a[j,i];
 	        j = j + 1;
        }
        if (sum == a[j,i]){
            flag = 2;
        }
        i = i + 1
    }

    return (flag);
}

## Driver code
main = ()=>
{
    a = matrix(c(0,1,2),3,4);

    #*
        0, 2, 1, 4
        1, 1, 2, 6
        2, 1, 1, 7
    *#
    a[1,] = c(0, 2, 1, 4)
    a[2,] = c(1, 1, 2, 6)
    a[3,] = c(2, 1, 1, 7)
    a = a + 0.0
    
    ## Order of Matrix(n)
    n = 3
    flag = 0;

    ## Performing Matrix transformation
    flag = PerformOperation(a, n);

    if (flag == 1){
        flag = CheckConsistency(a, n, flag);
    }

    ## Printing Final Matrix
    System.out.println("Final Augmented Matrix is : ");
    PrintMatrix(a, n);
    System.out.println(default);

    ## Printing Solutions(if exist)
    PrintResult(a, n, flag);
    
    b = matrix(c(0,1,2,3),4,5);

    #*
	 1,  2, -1,  3, -8
	 2,  0,  2, -1, 13
	-1,  1,  1, -1,  8
    	 3,  3, -1,  2, -1
    *#
    b[1,] = c( 1,  2, -1,  3, -8)
    b[2,] = c( 2,  0,  2, -1, 13)
    b[3,] = c(-1,  1,  1, -1,  8)
    b[4,] = c( 3,  3, -1,  2, -1)
    b = b + 0.0


    n = 4
    flag = 0;

    ## Performing Matrix transformation
    flag = PerformOperation(b, n);

    if (flag == 1){
        flag = CheckConsistency(b, n, flag);
    }

    ## Printing Final Matrix
    System.out.println("Final Augmented Matrix is : ");
    PrintMatrix(b, n);
    System.out.println(default);

    ## Printing Solutions(if exist)
    PrintResult(b, n, flag);
}

main();

#*


Final Augmented Matrix is : 
1.0 0.0 0.0 2.2 
0.0 2.0 0.0 2.8 
0.0 0.0 -2.5 -3.0 

Result is : 2.2 1.4 1.2 
Final Augmented Matrix is : 
1.0 0.0 0.0 0.0 1.0 
0.0 -4.0 0.0 0.0 -8.000000000000002 
0.0 0.0 3.0 0.0 11.999999999999998 
0.0 0.0 0.0 -2.833333333333333 8.5 

Result is : 1.0 2.0000000000000004 3.9999999999999996 -3.0000000000000004 

*#

#*
ERRORES:

TIPO        MENSAJE                         LINEA   COLUMNA
SEMANTICO	UNABLE TO FIND VARIABLE temp	65	    8	
SEMANTICO	UNABLE TO FIND VARIABLE zzzz	66  	8

*#